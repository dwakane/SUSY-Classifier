import org.apache.spark.ml.feature.{RFormula, SQLTransformer}
import org.apache.spark.ml.classification.{LogisticRegression, GBTClassifier, MultilayerPerceptronClassifier}
import org.apache.spark.ml.classification.{GBTClassifier, MultilayerPerceptronClassifier}
import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}
import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val susyDF = spark.read.format("parquet").option("compression", "gzip").load("/home/2020/summer/dk1384/cp/data/susy.parquet")

val rForm = new RFormula().setFormula("LAB ~ .")

val lr = new LogisticRegression().setLabelCol("label").setFeaturesCol("features").setPredictionCol("lr_p").setRawPredictionCol("lr_rp").setProbabilityCol("lr_prob")

val gbt = new GBTClassifier().setLabelCol("label").setFeaturesCol("features").setPredictionCol("gbt_p").setProbabilityCol("gbt_prob").setRawPredictionCol("gpt_rp")

val mpc = new MultilayerPerceptronClassifier().setBlockSize(128).setSeed(1234L).setMaxIter(100).setLabelCol("label").setFeaturesCol("features").setPredictionCol("mpc_p").setRawPredictionCol("mpc_rp").setProbabilityCol("mpc_prob")

val vote = new SQLTransformer().setStatement("""
	SELECT label, lr_p, gbt_p, mpc_p, round((lr_p + gbt_p + mpc_p)/3.0,0) AS `prediction`
	FROM __THIS__
""")
	
val stages = Array(rForm, lr, gbt, mpc, vote)

val pipeline = new Pipeline().setStages(stages)

val Array(train, test) = susyDF.randomSplit(Array(.0025, .9975))

val params = new ParamGridBuilder().addGrid(lr.elasticNetParam, Array(0.0, 1.0 )).addGrid(lr.regParam, Array(0.0, 1.0)).addGrid(gbt.minInstancesPerNode, Array[Int](1,5)).addGrid(gbt.maxDepth,Array[Int](3,5)).addGrid(mpc.layers, Array(Array[Int](18,7,7,2),Array[Int](18,14,2))).build()

val evaluator = new BinaryClassificationEvaluator().setMetricName("areaUnderROC").setRawPredictionCol("prediction").setLabelCol("label")

val tvs = new TrainValidationSplit().setTrainRatio(0.75).setEstimatorParamMaps(params).setEstimator(pipeline).setEvaluator(evaluator)

val tvsFitted =  tvs.fit(train)

tvsFitted.write.overwrite().save("/home/2020/summer/dk1384/cp/data/trainedModel")


evaluator.evaluate(tvsFitted.transform(test))
